{
  "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156",
  "repository_url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines",
  "labels_url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156/labels{/name}",
  "comments_url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156/comments",
  "events_url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156/events",
  "html_url": "https://github.com/rustfoundation/safety-critical-rust-coding-guidelines/issues/156",
  "id": 3258276002,
  "node_id": "I_kwDOOIv1lc7CNVii",
  "number": 156,
  "title": "[Coding Guideline]: Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand",
  "user": {
    "login": "XXX",
    "id": 11747623,
    "node_id": "MDQ6VXNlcjExNzQ3NjIz",
    "avatar_url": "https://avatars.githubusercontent.com/u/xxx?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/XXX",
    "html_url": "https://github.com/XXX",
    "followers_url": "https://api.github.com/users/XXX/followers",
    "following_url": "https://api.github.com/users/XXX/following{/other_user}",
    "gists_url": "https://api.github.com/users/XXX/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/XXX/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/XXX/subscriptions",
    "organizations_url": "https://api.github.com/users/XXX/orgs",
    "repos_url": "https://api.github.com/users/XXX/repos",
    "events_url": "https://api.github.com/users/XXX/events{/privacy}",
    "received_events_url": "https://api.github.com/users/XXX/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 8397609782,
      "node_id": "LA_kwDOOIv1lc8AAAAB9IlbNg",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/coding%20guideline",
      "name": "coding guideline",
      "color": "AD28F1",
      "default": false,
      "description": "An issue related to a suggestion for a coding guideline"
    },
    {
      "id": 8677326095,
      "node_id": "LA_kwDOOIv1lc8AAAACBTV9Dw",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/category:%20mandatory",
      "name": "category: mandatory",
      "color": "5E1F44",
      "default": false,
      "description": "A coding guideline with category mandatory"
    },
    {
      "id": 8677332914,
      "node_id": "LA_kwDOOIv1lc8AAAACBTWXsg",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/decidability:%20decidable",
      "name": "decidability: decidable",
      "color": "D4BCD7",
      "default": false,
      "description": "A coding guideline which can be checked automatically"
    },
    {
      "id": 8677341923,
      "node_id": "LA_kwDOOIv1lc8AAAACBTW64w",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/scope:%20module",
      "name": "scope: module",
      "color": "AC7485",
      "default": false,
      "description": "A coding guideline that can be determined applied at the module level"
    },
    {
      "id": 8677368665,
      "node_id": "LA_kwDOOIv1lc8AAAACBTYjWQ",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/chapter:%20expressions",
      "name": "chapter: expressions",
      "color": "D82523",
      "default": false,
      "description": ""
    },
    {
      "id": 8677484351,
      "node_id": "LA_kwDOOIv1lc8AAAACBTfnPw",
      "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/labels/status:%20draft",
      "name": "status: draft",
      "color": "c5def5",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "PLeVasseur",
    "id": 11622119,
    "node_id": "MDQ6VXNlcjExNjIyMTE5",
    "avatar_url": "https://avatars.githubusercontent.com/u/11622119?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PLeVasseur",
    "html_url": "https://github.com/PLeVasseur",
    "followers_url": "https://api.github.com/users/PLeVasseur/followers",
    "following_url": "https://api.github.com/users/PLeVasseur/following{/other_user}",
    "gists_url": "https://api.github.com/users/PLeVasseur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PLeVasseur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PLeVasseur/subscriptions",
    "organizations_url": "https://api.github.com/users/PLeVasseur/orgs",
    "repos_url": "https://api.github.com/users/PLeVasseur/repos",
    "events_url": "https://api.github.com/users/PLeVasseur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PLeVasseur/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "PLeVasseur",
      "id": 11622119,
      "node_id": "MDQ6VXNlcjExNjIyMTE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11622119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLeVasseur",
      "html_url": "https://github.com/PLeVasseur",
      "followers_url": "https://api.github.com/users/PLeVasseur/followers",
      "following_url": "https://api.github.com/users/PLeVasseur/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLeVasseur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLeVasseur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLeVasseur/subscriptions",
      "organizations_url": "https://api.github.com/users/PLeVasseur/orgs",
      "repos_url": "https://api.github.com/users/PLeVasseur/repos",
      "events_url": "https://api.github.com/users/PLeVasseur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLeVasseur/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2025-07-24T02:35:55Z",
  "updated_at": "2025-07-26T16:04:29Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "type": null,
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "body": "### Chapter\n\nExpressions\n\n### Guideline Title\n\nInteger shift shall only be performed through `checked_` APIs\n\n### Category\n\nMandatory\n\n### Status\n\nDraft\n\n### Release Begin\n\n1.7.0\n\n### Release End\n\nlatest\n\n### FLS Paragraph ID\n\nfls_sru4wi5jomoe\n\n### Decidability\n\nDecidable\n\n### Scope\n\nModule\n\n### Tags\n\nnumerics, reduce-human-error, maintainability, portability, surprising-behavior\n\n### Amplification\n\nIn particular, the user should only perform left shifts via the [checked_shl](https://doc.rust-lang.org/core/index.html?search=%22checked_shl%22) function and right shifts via the [checked_shr](https://doc.rust-lang.org/core/index.html?search=%22checked_shr%22) function. Both of these functions exist in [core](https://doc.rust-lang.org/core/index.html).\n\nThis rule applies to the following primitive types:\n* `i8`\n* `i16`\n* `i32`\n* `i64`\n* `i128`\n* `u8`\n* `u16`\n* `u32`\n* `u64`\n* `u128`\n* `usize`\n* `isize`\n\n### Exception(s)\n\n_No response_\n\n### Rationale\n\nThis is directly inspired by [INT34-C. Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand](https://wiki.sei.cmu.edu/confluence/display/c/INT34-C.+Do+not+shift+an+expression+by+a+negative+number+of+bits+or+by+greater+than+or+equal+to+the+number+of+bits+that+exist+in+the+operand).\n\nIn Rust these out-of-range shifts don't give rise to Undefined Behavior; however, they are still problematic in Safety Critical contexts for two reasons.\n\n**Reason 1: inconsistent behavior**\n\nThe behavior of shift operations depends on the compilation mode. Say for example, that we have a number `x` of type `uN`, and we perform the operation\n\n`x << M` \n\nThen, it will behave like this:\n\n| **Compilation Mode** | `0 <= M < N` | `M < 0`         |     `N <= M`    |\n|:--------------------:|:----------------:|:---------------------:|:-------------------:|\n| Debug                | Shifts normally  | Panics              | Panics              |\n| Release              | Shifts normally  | Shifts by `M mod N` | Shifts by `M mod N` |\n\n> Note: the behavior is exactly the same for the `>>` operator.\n\nPanicking in `Debug` is an issue by itself, however, a perhaps larger issue there is that its behavior is different from that of `Release`. Such inconsistencies aren't acceptable in Safety Critical scenarios.\n\nTherefore, a consistently-behaved operation should be required for performing shifts.\n\n# Reason 2: programmer intent\n\nThere is no scenario in which it makes sense to perform a shift of negative length, or of more than `N - 1` bits. The operation itself becomes meaningless.\n\nTherefore, an API that restricts the length of the shift to the range `[0, N - 1]` should be used instead of the `<<` and `>>` operators.\n\n# The Solution\n\nThe ideal solution for this exists in `core`: `checked_shl` and `checked_shr`.\n\n`<T>::checked_shl(M)` returns a value of type `Option<T>`, in the following way:\n\n* If `M < 0`, the output is `None`\n* If `0 <= M < N` for `T` of `N` bits, then the output is `Some(T)`\n* If `N <= M`, the output is `None`\n\nThis API has consistent behavior across `Debug` and `Release`, and makes the programmer intent explicit, which effectively solves this issue.\n\n### Non-Compliant Example - Prose\n\nAs seen below in the `non_compliant_example()` function:\n\n* A `Debug` build **panics**, \n* Whereas a `Release` build prints the values:\n  \n  ```\n  61 << -1 = 2147483648\n  61 << 4 = 976\n  61 << 40 = 15616\n  ```\n\nThis shows **Reason 1** prominently.\n\n**Reason 2** is not seen in the code, because it is a reason of programmer intent: shifts by less than 0 or by more than `N - 1` (`N` being the bit-length of the value being shifted) are both meaningless.\n\n### Non-Compliant Example - Code\n\n```rust\nfn non_compliant_example() {\n    fn bad_shl(bits: u32, shift: i32) -> u32 {\n        bits << shift\n    }\n    \n    let bits : u32 = 61;\n    let shifts = vec![-1, 4, 40];\n    \n    for sh in shifts {\n        println!(\"{bits} << {sh} = {}\", bad_shl(bits, sh));\n    }\n}\n```\n### Compliant Example - Prose\n\nAs seen below in the `compliant_example()` function:\n\n* Both `Debug` and `Release` give the same exact output, which addresses **Reason 1**.\n* Shifting by negative values is impossible due to the fact that `checked_shl` only accepts unsigned integers as shift lengths.\n* Shifting by more than `N - 1` (`N` being the bit-length of the value being shifted) returns a `None` value:\n  ```\n  61 << 4 = Some(976)\n  61 << 40 = None\n  ```\n\nThe last 2 observations show how this addresses **Reason 2**.\n\n### Compliant Example - Code\n\n```rust\nfn compliant_example() {\n    fn good_shl(bits: u32, shift: u32) -> Option<u32> {\n        bits.checked_shl(shift)\n    }\n    \n    let bits : u32 = 61;\n    // let shifts = vec![-1, 4, 40];\n    //                    ^--- Would not typecheck, as checked_shl\n    //                         only accepts positive shift amounts\n    let shifts = vec![4, 40];\n    \n    for sh in shifts {\n        println!(\"{bits} << {sh} = {:?}\", good_shl(bits, sh));\n    }\n}\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/rustfoundation/safety-critical-rust-coding-guidelines/issues/156/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
